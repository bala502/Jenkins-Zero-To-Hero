pipeline {
  agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        //git branch: 'main', url: 'https://github.com/iam-veeramalla/Jenkins-Zero-To-Hero.git'
		        }
                              }
							  
        stage('Build and test') {
      steps {
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
		        }
                              }		

      	stage('static code analisys') {
			environment {
                                SONAR_URL = "http://3.108.193.18:9000"
                                 }
        steps {
		withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_ACCESS_TOKEN')]) {
    sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_ACCESS_TOKEN -Dsonar.host.url=${SONAR_URL}'
}
		        }
                              }	

       stage('Build Docker Image') {
      environment {
  DOCKER_IMAGE = "bala-ultimate-cicd:${BUILD_NUMBER}"
}

      steps {
        script {
            sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
	    sh 'docker images'
            }
        }	
      }
       stage('Push Docker Image to docker hub') {
          withCredentials([usernameColonPassword(credentialsId: 'DOCKER_CRED', variable: 'DOCKER_CRED')]) {
            sh "docker login -u ${DOCKER_CRED} -p ${DOCKER_CRED}"
}
            sh "docker push tnikhil22/bala-ultimate-cicd:${BUILD_NUMBER} "
        }
	         }
}
